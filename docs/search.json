[
  {
    "objectID": "ifcb-data-wrangle.html",
    "href": "ifcb-data-wrangle.html",
    "title": "ifcb-port aransas",
    "section": "",
    "text": "Code\n# | warning: false\n# | message: false\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(patchwork)\nlibrary(svglite)\nlibrary(scales)\n\n\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\n\nCode\nlibrary(treemapify)"
  },
  {
    "objectID": "ifcb-data-wrangle.html#refine-input-data",
    "href": "ifcb-data-wrangle.html#refine-input-data",
    "title": "ifcb-port aransas",
    "section": "2.1 Refine input data",
    "text": "2.1 Refine input data"
  },
  {
    "objectID": "ifcb-data-wrangle.html#add-taxa-curated-to-cell-ids-and-carbon-data",
    "href": "ifcb-data-wrangle.html#add-taxa-curated-to-cell-ids-and-carbon-data",
    "title": "ifcb-port aransas",
    "section": "2.2 Add taxa curated to cell IDs and carbon data",
    "text": "2.2 Add taxa curated to cell IDs and carbon data\nSiddarth contributed to this taxa list.\n\n\nCode\ntax_curated &lt;- read.csv(\"input-data/tax-list.csv\") |&gt;\n  select(CELL_ID:Species) \n\n\nAdd to cell ID information\n\n\nCode\ncounts_long_wtax &lt;- counts %&gt;% \n  pivot_longer(cols = -c(DAY, DATE, MONTH, HOUR), names_to = \"CELL_ID\", values_to = \"COUNT\", values_drop_na = TRUE) %&gt;% \n  filter(COUNT &gt; 0) %&gt;% \n  left_join(tax_curated)\n\n\nJoining with `by = join_by(CELL_ID)`\n\n\nCode\n# head(counts_long_wtax)\n# range(counts_long_wtax$COUNT)\n\n\nAdd to carbon data\n\n\nCode\ncarbon_long_wtax &lt;- carbon %&gt;% \n  pivot_longer(cols = -c(DAY, DATE, MONTH, HOUR), names_to = \"CELL_ID\", values_to = \"CARBON\", values_drop_na = TRUE) %&gt;% \n  filter(CARBON &gt; 0) %&gt;% \n  left_join(tax_curated)\n\n\nJoining with `by = join_by(CELL_ID)`\n\n\nCode\n# head(carbon_long_wtax)\n# range(carbon_long_wtax$CARBON)\n\n\nTypes of classifications in dataset.\n\n\nCode\ntable(counts_long_wtax$COURSE_CLASSIFICATION)\n\n\n\n      Bacteria   Biol unknown  Cyanobacteria    IFCB excess         Larvae \n         23176         472988          55222         250585           2200 \nMicroeukaryote \n       4193699 \n\n\nCode\ntable(counts_long_wtax$TYPE)\n\n\n\nBiol unknown         Cell    Cell type     Non-biol \n      338883      3877707       599796       181484 \n\n\nCode\n# glimpse(counts_long_wtax)\n\n# table(carbon_long_wtax$COURSE_CLASSIFICATION)"
  },
  {
    "objectID": "ifcb-data-wrangle.html#save-import-data-locally",
    "href": "ifcb-data-wrangle.html#save-import-data-locally",
    "title": "ifcb-port aransas",
    "section": "2.3 Save / import data locally",
    "text": "2.3 Save / import data locally\n\n\nCode\n# save(counts_long_wtax, carbon_long_wtax, file = \"input-data/compiled_data_input.RData\")\n\n\nPick up here to work locally.\n\n\nCode\nload(\"input-data/compiled_data_input.RData\", verbose = TRUE)\n\n\nLoading objects:\n  counts_long_wtax\n  carbon_long_wtax\n\n\nWe need the date/time information from the IFCB outputs to be similar to the metadata for statistical work.\n\n\nCode\nhead(counts_long_wtax)\n\n\n# A tibble: 6 × 16\n  DAY                 DATE       MONTH  HOUR CELL_ID           COUNT\n  &lt;dttm&gt;              &lt;date&gt;     &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;             &lt;dbl&gt;\n1 2008-01-01 00:00:00 2008-01-01     1     0 Akashiwo         0.0783\n2 2008-01-01 00:00:00 2008-01-01     1     0 Anabaena         0.0783\n3 2008-01-01 00:00:00 2008-01-01     1     0 Apedinella       8.24  \n4 2008-01-01 00:00:00 2008-01-01     1     0 Asterionellopsis 0.0779\n5 2008-01-01 00:00:00 2008-01-01     1     0 Beads            5.81  \n6 2008-01-01 00:00:00 2008-01-01     1     0 Centric          2.82  \n# ℹ 10 more variables: COURSE_CLASSIFICATION &lt;chr&gt;, TYPE &lt;chr&gt;, Domain &lt;chr&gt;,\n#   Supergroup &lt;chr&gt;, Phylum &lt;chr&gt;, Class &lt;chr&gt;, Order &lt;chr&gt;, Family &lt;chr&gt;,\n#   Genus &lt;chr&gt;, Species &lt;chr&gt;"
  },
  {
    "objectID": "ifcb-data-wrangle.html#tabs-buoy-d",
    "href": "ifcb-data-wrangle.html#tabs-buoy-d",
    "title": "ifcb-port aransas",
    "section": "3.1 TABS Buoy D",
    "text": "3.1 TABS Buoy D\nImport and compile data for TABS Buoy D from “Ocean Data”. Downloaded as individual years.\nFirst isolate downloaded files.\n\n\nCode\nocean_data_files &lt;- list.files(path = \"input-data/TABS_D/\", pattern = \"Ocean Data \", full.names = TRUE)\n\n# Make sure it works\nocean_data_files\n\n\n[1] \"input-data/TABS_D//Ocean Data 2009.txt\"\n[2] \"input-data/TABS_D//Ocean Data 2010.txt\"\n[3] \"input-data/TABS_D//Ocean Data 2012.txt\"\n[4] \"input-data/TABS_D//Ocean Data 2013.txt\"\n[5] \"input-data/TABS_D//Ocean Data 2014.txt\"\n[6] \"input-data/TABS_D//Ocean Data 2015.txt\"\n[7] \"input-data/TABS_D//Ocean Data 2016.txt\"\n[8] \"input-data/TABS_D//Ocean Data 2017.txt\"\n\n\nCode\n# The full.names = TRUE means that it will output the whole path. This is what we want!\n\n\nLet’s test out how to import one of these files so we can write an effective function below.\n\n\nCode\ntest &lt;- read.table(\n  \"input-data/TABS_D/Ocean Data 2010.txt\", #Use read.table, because columns were separated by either 1 or more spaces. \n  comment.char = \"\", # Tell R that the \"#\" in line 1 and 2 needs to be read, instead of ignored.\n  skip = 1, #Skip the first line, because there are 2 \"headers\"\n  header = TRUE # make sure the first column is read in as a column header.\n  )\nhead(test)\n\n\n  X.yr mo dy hr mn m degC mS.cm psu  X. ppm ug.l FTU X..1 mv\n1 2010  1  1  0  0 2 14.7   999  99 999  99  999  99   99 99\n2 2010  1  1  0 30 2 14.7   999  99 999  99  999  99   99 99\n3 2010  1  1  1  0 2 14.6   999  99 999  99  999  99   99 99\n4 2010  1  1  1 30 2 14.6   999  99 999  99  999  99   99 99\n5 2010  1  1  2  0 2 14.6   999  99 999  99  999  99   99 99\n6 2010  1  1  2 30 2 14.6   999  99 999  99  999  99   99 99\n\n\nCode\n# ?read.table\n\n# We will want to fix the column headers below, so let's try it. \n# YY  MM DD hh mm   DEPTH  OTMP   COND   SAL   O2% O2PPM  CLCON  TURB    PH    EH\n\ntest_headers &lt;- test |&gt; \n  select(YEAR = X.yr,\n         MONTH = mo,\n         DAY = dy,\n         HOUR = hr,\n         MINUTE = mn,\n         DEPTH_m = m,\n         TEMP_degC = degC,\n         COND_mS_cm = mS.cm,\n         SAL_psu = psu,\n         O2_perc = X.,\n         O2_PPM = ppm,\n         Cl_ug_l = ug.l,\n         TURB_FTU = FTU,\n         pH = X..1,\n         EH = mv)\n## This is where you will want to review the data you collected. And remember R is really basic when it comes to reading in spaces and special characters. So we should make more meaningful column headers.\nhead(test_headers)\n\n\n  YEAR MONTH DAY HOUR MINUTE DEPTH_m TEMP_degC COND_mS_cm SAL_psu O2_perc\n1 2010     1   1    0      0       2      14.7        999      99     999\n2 2010     1   1    0     30       2      14.7        999      99     999\n3 2010     1   1    1      0       2      14.6        999      99     999\n4 2010     1   1    1     30       2      14.6        999      99     999\n5 2010     1   1    2      0       2      14.6        999      99     999\n6 2010     1   1    2     30       2      14.6        999      99     999\n  O2_PPM Cl_ug_l TURB_FTU pH EH\n1     99     999       99 99 99\n2     99     999       99 99 99\n3     99     999       99 99 99\n4     99     999       99 99 99\n5     99     999       99 99 99\n6     99     999       99 99 99\n\n\n#YY  MM DD hh mm   DEPTH  OTMP   COND   SAL   O2% O2PPM  CLCON  TURB    PH    EH\n#yr  mo dy hr mn       m  degC  mS/cm   psu     %   ppm   ug/l   FTU     -    mv\n2010 01 01 00 00     2.0 14.70 999.00 99.00 999.0 99.00 999.00    99 99.00 99.00\n2010 01 01 00 30     2.0 14.70 999.00 99.00 999.0 99.00 999.00    99 99.00 99.00\nColumns should be: YY MM DD hh mm DEPTH OTMP COND SAL O2% O2PPM CLCON TURB PH EH\nWe can test out and build each line of the function using more examples with ocean_data_files[1]\n\n\nCode\ni &lt;- ocean_data_files[1]\n# i\n# Isolate each file name, so we can get the year information.\nstrip_name &lt;- unlist(strsplit(i, \" \"))\nyear &lt;- str_remove(strip_name[3], \".txt\")\nyear\n\n\n[1] \"2009\"\n\n\nWrite a function to import each file, modify it, and anneal it to itself.\n\n\nCode\nrm(in_data); rm(new_table)\n\n\nWarning in rm(in_data): object 'in_data' not found\n\n\nWarning in rm(new_table): object 'new_table' not found\n\n\nCode\n# The i will be our variable in the function. This \"for\" statement will reach each item in the \"ocean_data_files\" file list.\nfor (i in ocean_data_files){\n  in_data &lt;- read.table(i, \n  comment.char = \"\", skip = 1, header = TRUE)\n  # Get year information.\n  strip_name &lt;- unlist(strsplit(i, \" \"))\n  year &lt;- str_remove(strip_name[3], \".txt\")\n  # Add as a column\n  in_data$YEAR &lt;- year\n  # Write an if else statement to combine all data.\n  if (!exists(\"new_table\")){\n    new_table &lt;- in_data\n  } else {\n    new_table &lt;- rbind(new_table, in_data)\n  }\n  rm(in_data)\n}\n\n# Check out the new table\nhead(new_table)\n\n\n  X.yr mo dy hr mn m degC mS.cm psu  X. ppm ug.l FTU X..1 mv YEAR\n1 2009  8  1  0  0 2 27.5   999  99 999  99  999  99   99 99 2009\n2 2009  8  1  0 30 2 27.5   999  99 999  99  999  99   99 99 2009\n3 2009  8  1  1  0 2 27.5   999  99 999  99  999  99   99 99 2009\n4 2009  8  1  1 30 2 27.5   999  99 999  99  999  99   99 99 2009\n5 2009  8  1  2  0 2 27.2   999  99 999  99  999  99   99 99 2009\n6 2009  8  1  2 30 2 27.2   999  99 999  99  999  99   99 99 2009\n\n\nCode\n# All years?\nunique(new_table$YEAR)\n\n\n[1] \"2009\" \"2010\" \"2012\" \"2013\" \"2014\" \"2015\" \"2016\" \"2017\"\n\n\nFix column headers now. Note that for this data, YEAR was listed twice. We can clean it up now. But it is an example of how to parse file names for dataframe information.\n\n\nCode\nocean_data_dfs &lt;- new_table |&gt; \n  select(YEAR = `X.yr`,\n       MONTH = mo,\n       DAY = dy,\n       HOUR = hr,\n       MINUTE = mn,\n       DEPTH_m = m,\n       TEMP_degC = degC,\n       COND_mS_cm = `mS.cm`,\n       SAL_psu = psu,\n       O2_perc = `X.`,\n       O2_PPM = ppm,\n       Cl_ug_l = `ug.l`,\n       TURB_FTU = FTU,\n       pH = `X..1`,\n       EH = mv)\ncolnames(ocean_data_dfs)\n\n\n [1] \"YEAR\"       \"MONTH\"      \"DAY\"        \"HOUR\"       \"MINUTE\"    \n [6] \"DEPTH_m\"    \"TEMP_degC\"  \"COND_mS_cm\" \"SAL_psu\"    \"O2_perc\"   \n[11] \"O2_PPM\"     \"Cl_ug_l\"    \"TURB_FTU\"   \"pH\"         \"EH\""
  },
  {
    "objectID": "ifcb-data-wrangle.html#make-plots-with-ocean-data",
    "href": "ifcb-data-wrangle.html#make-plots-with-ocean-data",
    "title": "ifcb-port aransas",
    "section": "3.2 Make plots with ocean data",
    "text": "3.2 Make plots with ocean data\n\n\nCode\nocean_data_dfs_long &lt;- ocean_data_dfs |&gt; \n  pivot_longer(cols = -c(YEAR, MONTH, DAY, HOUR, MINUTE), names_to = \"VARIABLE\", values_to = \"VALUE\") |&gt; \n  unite(date, YEAR, MONTH, DAY, sep = \"-\", remove = FALSE) |&gt;\n  unite(month_day, MONTH, DAY, sep = \"-\", remove = FALSE) |&gt; \n  unite(time, HOUR, MINUTE, sep = \":\") |&gt; \n  # Artificially make a column of dates that have the same year (it needs to be a leap year).\n  mutate(GRAPH_DATE = as.Date(paste(\"2012\", month(date),mday(date), sep = \"-\")))\n\nhead(ocean_data_dfs_long)\n\n\n# A tibble: 6 × 9\n  date      YEAR month_day MONTH   DAY time  VARIABLE   VALUE GRAPH_DATE\n  &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;     &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;date&gt;    \n1 2009-8-1  2009 8-1           8     1 0:0   DEPTH_m      2   2012-08-01\n2 2009-8-1  2009 8-1           8     1 0:0   TEMP_degC   27.5 2012-08-01\n3 2009-8-1  2009 8-1           8     1 0:0   COND_mS_cm 999   2012-08-01\n4 2009-8-1  2009 8-1           8     1 0:0   SAL_psu     99   2012-08-01\n5 2009-8-1  2009 8-1           8     1 0:0   O2_perc    999   2012-08-01\n6 2009-8-1  2009 8-1           8     1 0:0   O2_PPM      99   2012-08-01\n\n\nWhen data are in long format it is easier to make lots of plots. Use the next two sets of commands to look at the data and variables.\n\n\nCode\nrange(ocean_data_dfs$TEMP_degC)\n\n\n[1]  0 99\n\n\nCode\n# hist(ocean_data_dfs$TURB_FTU)\n# range(ocean_data_dfs$TURB_FTU)\n\n\n\n\nCode\nunique(ocean_data_dfs_long$VARIABLE)\n\n\n [1] \"DEPTH_m\"    \"TEMP_degC\"  \"COND_mS_cm\" \"SAL_psu\"    \"O2_perc\"   \n [6] \"O2_PPM\"     \"Cl_ug_l\"    \"TURB_FTU\"   \"pH\"         \"EH\"        \n\n\nCode\nhead(ocean_data_dfs_long)\n\n\n# A tibble: 6 × 9\n  date      YEAR month_day MONTH   DAY time  VARIABLE   VALUE GRAPH_DATE\n  &lt;chr&gt;    &lt;int&gt; &lt;chr&gt;     &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;date&gt;    \n1 2009-8-1  2009 8-1           8     1 0:0   DEPTH_m      2   2012-08-01\n2 2009-8-1  2009 8-1           8     1 0:0   TEMP_degC   27.5 2012-08-01\n3 2009-8-1  2009 8-1           8     1 0:0   COND_mS_cm 999   2012-08-01\n4 2009-8-1  2009 8-1           8     1 0:0   SAL_psu     99   2012-08-01\n5 2009-8-1  2009 8-1           8     1 0:0   O2_perc    999   2012-08-01\n6 2009-8-1  2009 8-1           8     1 0:0   O2_PPM      99   2012-08-01\n\n\n\nTemperature by year\n\n\nCode\nocean_data_dfs_long |&gt; \n  filter(VARIABLE == \"TEMP_degC\") |&gt; \n  filter(VALUE &lt; 99) |&gt; \n  mutate(YEAR = as.character(YEAR)) |&gt; \n  group_by(YEAR, date, GRAPH_DATE) |&gt; \n    summarise(TEMP_MEAN = mean(VALUE),\n              TEMP_MIN = min(VALUE),\n              TEMP_MAX = max(VALUE)) |&gt; \n  ggplot(aes(x = GRAPH_DATE, y = TEMP_MEAN, group = YEAR, color = YEAR)) +\n  scale_x_date(labels = scales::date_format(\"%m/%d\")) +\n  geom_point(shape = 16, size = 2) +\n  geom_errorbar(aes(x = GRAPH_DATE, ymin = TEMP_MIN, ymax = TEMP_MAX)) +\n  scale_color_brewer(palette = \"Set2\") +\n  theme_classic() +\n  theme(\n    axis.text.x = element_text(angle = 0, face = \"bold\", color = \"black\", hjust = 0.5, vjust = 1, size = 24),\n    axis.text.y = element_text(color = \"black\", face = \"bold\", size = 24),\n    axis.title = element_text(color = \"black\", face = \"bold\", size = 24)) +\n  labs(x = \"Date\", y = \"Temperature °C\")\n\n\n`summarise()` has grouped output by 'YEAR', 'date'. You can override using the\n`.groups` argument."
  },
  {
    "objectID": "ifcb-data-wrangle.html#groups-by-carbon-biomass",
    "href": "ifcb-data-wrangle.html#groups-by-carbon-biomass",
    "title": "ifcb-port aransas",
    "section": "5.1 Groups by carbon biomass",
    "text": "5.1 Groups by carbon biomass\n\n\nCode\ncarbon_long_wtax |&gt; \n  filter(COURSE_CLASSIFICATION == \"Microeukaryote\") |&gt; \n  group_by(Supergroup, Phylum) |&gt; \n    summarise(SUM = sum(CARBON)) |&gt; \n  ggplot(aes(x = Supergroup, y = SUM, fill = Phylum)) +\n  geom_bar(stat = \"identity\", color = \"black\") +\n  coord_flip() +\n  theme_classic() +\n  labs(y = \"Sum of carbon biomass\", x = \"Supergroup\")\n\n\n`summarise()` has grouped output by 'Supergroup'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\nCode\n# counts_long_wtax %&gt;% \n  # select(COURSE_CLASSIFICATION, TYPE, Domain, Supergroup, Phylum) %&gt;% \n  # distinct()\n# unique(counts_long_wtax$COURSE_CLASSIFICATION)\n\n\n\nBreakdown Alveolata\n\n\nCode\nhead(counts_long_wtax)\n\n\n# A tibble: 6 × 16\n  DAY                 DATE       MONTH  HOUR CELL_ID           COUNT\n  &lt;dttm&gt;              &lt;date&gt;     &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;             &lt;dbl&gt;\n1 2008-01-01 00:00:00 2008-01-01     1     0 Akashiwo         0.0783\n2 2008-01-01 00:00:00 2008-01-01     1     0 Anabaena         0.0783\n3 2008-01-01 00:00:00 2008-01-01     1     0 Apedinella       8.24  \n4 2008-01-01 00:00:00 2008-01-01     1     0 Asterionellopsis 0.0779\n5 2008-01-01 00:00:00 2008-01-01     1     0 Beads            5.81  \n6 2008-01-01 00:00:00 2008-01-01     1     0 Centric          2.82  \n# ℹ 10 more variables: COURSE_CLASSIFICATION &lt;chr&gt;, TYPE &lt;chr&gt;, Domain &lt;chr&gt;,\n#   Supergroup &lt;chr&gt;, Phylum &lt;chr&gt;, Class &lt;chr&gt;, Order &lt;chr&gt;, Family &lt;chr&gt;,\n#   Genus &lt;chr&gt;, Species &lt;chr&gt;\n\n\n\n\nCode\ncounts_long_wtax |&gt; \n  filter(Supergroup == \"Alveolata\") |&gt; \n  group_by(Phylum, Class, Order) |&gt; \n    summarise(SUM = sum(COUNT),\n              COUNT = n()) |&gt; \n  ggplot(aes(area = SUM, fill = Class, subgroup = Order, label = Order)) +\n  geom_treemap(color = \"white\") +\n  geom_treemap_subgroup_border(color = \"grey\") +\n    geom_treemap_text(place = \"centre\",size = 12) + \n  theme_classic() +\n  labs(title = \"Most abundant Alveolata\")\n\n\n`summarise()` has grouped output by 'Phylum', 'Class'. You can override using\nthe `.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\nCode\ncarbon_long_wtax |&gt; \n  filter(Supergroup == \"Alveolata\") |&gt; \n  group_by(Phylum, Class, Order) |&gt; \n    summarise(SUM_CARBON = sum(CARBON)) |&gt; \n  ggplot(aes(area = SUM_CARBON, fill = Class, subgroup = Order, label = Order)) +\n  geom_treemap(color = \"white\") +\n  geom_treemap_subgroup_border(color = \"grey\") +\n    geom_treemap_text(place = \"centre\",size = 12) + \n  theme_classic() +\n  labs(\"Alveolata by carbon\")\n\n\n`summarise()` has grouped output by 'Phylum', 'Class'. You can override using\nthe `.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\nBreakdown Stramenopiles\n\n\nCode\nhead(counts_long_wtax)\n\n\n# A tibble: 6 × 16\n  DAY                 DATE       MONTH  HOUR CELL_ID           COUNT\n  &lt;dttm&gt;              &lt;date&gt;     &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;             &lt;dbl&gt;\n1 2008-01-01 00:00:00 2008-01-01     1     0 Akashiwo         0.0783\n2 2008-01-01 00:00:00 2008-01-01     1     0 Anabaena         0.0783\n3 2008-01-01 00:00:00 2008-01-01     1     0 Apedinella       8.24  \n4 2008-01-01 00:00:00 2008-01-01     1     0 Asterionellopsis 0.0779\n5 2008-01-01 00:00:00 2008-01-01     1     0 Beads            5.81  \n6 2008-01-01 00:00:00 2008-01-01     1     0 Centric          2.82  \n# ℹ 10 more variables: COURSE_CLASSIFICATION &lt;chr&gt;, TYPE &lt;chr&gt;, Domain &lt;chr&gt;,\n#   Supergroup &lt;chr&gt;, Phylum &lt;chr&gt;, Class &lt;chr&gt;, Order &lt;chr&gt;, Family &lt;chr&gt;,\n#   Genus &lt;chr&gt;, Species &lt;chr&gt;\n\n\n\n\nCode\ncounts_long_wtax |&gt; \n  filter(Supergroup == \"Stramenopiles\") |&gt; \n  group_by(Phylum, Class, Order) |&gt; \n    summarise(SUM = sum(COUNT),\n              COUNT = n()) |&gt; \n  ggplot(aes(area = SUM, fill = Class, subgroup = Order, label = Order)) +\n  geom_treemap(color = \"white\") +\n  geom_treemap_subgroup_border(color = \"grey\") +\n    geom_treemap_text(place = \"centre\",size = 12) + \n  theme_classic() +\n  labs(title = \"Most abundant Stramenopiles\")\n\n\n`summarise()` has grouped output by 'Phylum', 'Class'. You can override using\nthe `.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\nCode\ncarbon_long_wtax |&gt; \n  filter(Supergroup == \"Stramenopiles\") |&gt; \n  group_by(Phylum, Class, Order) |&gt; \n    summarise(SUM_CARBON = sum(CARBON)) |&gt; \n  ggplot(aes(area = SUM_CARBON, fill = Class, subgroup = Order, label = Order)) +\n  geom_treemap(color = \"white\") +\n  geom_treemap_subgroup_border(color = \"grey\") +\n    geom_treemap_text(place = \"centre\",size = 12) + \n  theme_classic() +\n  labs(title = \"Stramenopiles by carbon\")\n\n\n`summarise()` has grouped output by 'Phylum', 'Class'. You can override using\nthe `.groups` argument."
  },
  {
    "objectID": "ifcb-data-wrangle.html#add-seasons",
    "href": "ifcb-data-wrangle.html#add-seasons",
    "title": "ifcb-port aransas",
    "section": "5.2 Add seasons",
    "text": "5.2 Add seasons"
  },
  {
    "objectID": "ifcb-data-wrangle.html#plot-microeuks-only",
    "href": "ifcb-data-wrangle.html#plot-microeuks-only",
    "title": "ifcb-port aransas",
    "section": "7.1 Plot Microeuks only",
    "text": "7.1 Plot Microeuks only\n\n\nCode\n# counts_long_wtax_wseason\n\n\n\n\nCode\ncounts_long_wtax_wseason |&gt; \n  filter(COURSE_CLASSIFICATION == \"Microeukaryote\") %&gt;% \n  filter(Phylum != \"Cnidaria\") %&gt;% \n    # Remove any zeroes\n  filter(COUNT &gt; 0) %&gt;% \n  # Group by Cell ID to get mean for cell ID for a single day.\n  group_by(DAY_NOYEAR, DATE, CELL_ID, SEASON, Domain, Supergroup, Phylum) %&gt;% \n    summarise(PER_DAY_CELL = mean(COUNT)) %&gt;% \n  ungroup() %&gt;% \n  # NOW sum up the different cell types that contribute to the course classification per day\n  group_by(DAY_NOYEAR, DATE, SEASON, Domain, Supergroup, Phylum) %&gt;% \n    summarise(PER_DAY_Phylum = sum(PER_DAY_CELL)) %&gt;% \n  ungroup() %&gt;% \n  # Now average by year\n  group_by(DAY_NOYEAR, Supergroup, Phylum, SEASON) %&gt;%  \n    summarise(MEAN_COUNTS_1yr = mean(PER_DAY_Phylum)) %&gt;% \n  ggplot(aes(x = DAY_NOYEAR, y = MEAN_COUNTS_1yr, fill = Phylum)) + \n  geom_area(position = \"stack\", color = \"black\") +\n  theme_classic() +\n  scale_x_date(date_labels = \"%b\", expand = c(0,0)) +\n  scale_y_continuous(expand = c(0,0)) +\n  labs(x = \"\", y = \"Cell counts\") +\n  theme(legend.position = \"bottom\", legend.title = element_blank(),\n        axis.text.x = element_text(color = \"black\", face = \"bold\", size = 12),\n        axis.text.y = element_text(color = \"black\", face = \"bold\", size = 12)) +\n  geom_rect(xmin = as_date(\"2024-09-01\"), xmax = as_date(\"2024-11-30\"), ymin = (YMAX + 20), ymax = (YMAX + 40), alpha = 0.2, fill = \"#cc5500\") +\n  geom_rect(xmin = as_date(\"2024-03-01\"), xmax = as_date(\"2024-5-31\"), ymin = (YMAX + 20), ymax = (YMAX + 40), alpha = 0.2, fill = \"#bccbae\") +\n  geom_rect(xmin = as_date(\"2024-06-01\"), xmax = as_date(\"2024-08-31\"), ymin = (YMAX + 20), ymax = (YMAX + 40), alpha = 0.2, fill = \"#ffbf00\") +\n  geom_rect(xmin = as_date(\"2024-12-01\"), xmax = as_date(\"2024-12-31\"), ymin = (YMAX + 20), ymax = (YMAX + 40), alpha = 0.2, fill = \"#5d4e62\") +\n  geom_rect(xmin = as_date(\"2024-01-01\"), xmax = as_date(\"2024-02-29\"), ymin = (YMAX + 20), ymax = (YMAX + 40), alpha = 0.2, fill = \"#5d4e62\")\n\n\n`summarise()` has grouped output by 'DAY_NOYEAR', 'DATE', 'CELL_ID', 'SEASON',\n'Domain', 'Supergroup'. You can override using the `.groups` argument.\n`summarise()` has grouped output by 'DAY_NOYEAR', 'DATE', 'SEASON', 'Domain',\n'Supergroup'. You can override using the `.groups` argument.\n`summarise()` has grouped output by 'DAY_NOYEAR', 'Supergroup', 'Phylum'. You\ncan override using the `.groups` argument.\n\n\n\n\n\n\n\n\n\nCode\n#Spring = March 1 - May 31 \n#Summer = June 1 - Aug 31 \n#Fall = Sept 1 - Nov 30 \n#Winter = Dec 1 - Feb (March 1 (-1))"
  }
]